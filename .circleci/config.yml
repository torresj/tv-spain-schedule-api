# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:21.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      # Create revision variable
      - run:
          name: Generate revision
          command: |
            echo 'export REVISION="${CIRCLE_BUILD_NUM}.$(echo -n $CIRCLE_SHA1 | tail -c 2)"' >> $BASH_ENV
            source $BASH_ENV
      # Login docker registry
      - run:
          name: Login docker registry
          command: docker login $REGISTRY_URL -u $REGISTRY_USER -p $REGISTRY_PASSWORD
      # Run test
      - run:
          name: Test
          command: mvn test jacoco:report coveralls:report
      # Save test report
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      # Build
      - run:
          name: Build
          command: mvn -Drevision=$REVISION -Dcertificate-authority-data=$CERTIFICATE_AUTHORITY_DATA -Dcluster=$CLUSTER -Dclient-certificate-data=$CLIENT_CERTIFICATE_DATA -Dclient-key-data=$CLIENT_KEY_DATA -Dkubernetes-user=$KUBERNETES_USER -DskipTests package
      # Persist build
      - persist_to_workspace:
          root: target
          paths:
            - helm

  # Deploy in kubernetes with helm
  deploy:
    # Using docker image with kubectl and helm
    docker:
      - image: torresjb/helmv3:latest

    steps:
      - attach_workspace:
          at: .
      # Add chartmuseum repo
      - run:
          name: Add chartmuseum repo
          command: helm repo add torresj $CHARTS_URL --username $CHARTS_USER --password $CHARTS_PASSWORD && helm repo update
      # Generate and push chart
      - run:
          name: Push chart
          command: helm cm-push helm/tv-spain-schedule-api torresj && helm repo update
      # Install chart
      - run:
          name: Install chart
          command: helm upgrade tv-spain-schedule-api helm/tv-spain-schedule-api -n nsqv --set db.db_user=$DB_USER,db.db_name=$DB_NAME,db.db_password=$DB_PASSWORD --install --kubeconfig=helm/kubeconfig
      # Check deployment
      - run:
          name: Check deployment
          command: kubectl rollout status deployment tv-spain-schedule-api --timeout=180s -n nsqv --kubeconfig=helm/kubeconfig

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  build_and_deploy: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build:
          context:
            - "Kubernetes cluster v2"
      - deploy:
          context:
            - "Kubernetes cluster v2"
          requires:
            - build

notify:
  webhooks:
    - url: https://coveralls.io/webhook?repo_token=$COVERALLS_REPO_TOKEN